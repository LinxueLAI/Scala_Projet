package projectEuler.exercices

import java.util.Date
import scala.collection.immutable.StreamView

object Problem02 {
  /*
     Problem 2 : Even Fibonacci numbers
     Description :
        Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

        4613732
        time used : 341
   */
  def main(args: Array[String]): Unit = {
    //    first solution:
    val startTime = new Date().getTime

    println(s"sum = ${fibonacci(4000000)}")

    val endTime = new Date().getTime
    println(s"time used : ${endTime - startTime}")
  }

  def fibonacci(n: Int): Int = {
    if (n == 1 || n == 2)
      2
    else {
      var a = 1
      var b = 2
      var c = a + b
      var sum = 2
      while (c < n) {
        if (c % 2 == 0) {
          sum += c
          println(c)
        }
        a = b
        b = c
        c = a + b
      }
      sum
    }
  }
}
